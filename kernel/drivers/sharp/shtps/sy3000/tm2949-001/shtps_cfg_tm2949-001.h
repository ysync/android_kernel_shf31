/* drivers/sharp/shtps/sy3000/tm2949-001/shtps_cfg_tm2949-001.h
 *
 * Copyright (c) 2014,Sharp. All rights reserved.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2,as published by the Free Software Foundation,and
 * may be copied,distributed,and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */
#ifndef __SHTPS_CFG_TM2949_001_H__
#define __SHTPS_CFG_TM2949_001_H__

/* ===================================================================================
 * [ Debug ]
 */
#define SHTPS_DEVELOP_MODE_ENABLE

#ifdef	SHTPS_DEVELOP_MODE_ENABLE
	//#define SHTPS_PERFORMANCE_CHECK_ENABLE
	//#define SHTPS_LOG_SEQ_ENABLE
	//#define SHTPS_LOG_SPIACCESS_SEQ_ENABLE
	#define SHTPS_LOG_DEBUG_ENABLE
	#define	SHTPS_LOG_EVENT_ENABLE
	#define	SHTPS_MODULE_PARAM_ENABLE
	#define	SHTPS_DEBUG_VARIABLE_DEFINES
	#define SHTPS_CREATE_KOBJ_ENABLE
#else
	#undef SHTPS_PERFORMANCE_CHECK_ENABLE
	#undef SHTPS_LOG_SEQ_ENABLE
	#undef SHTPS_LOG_SPIACCESS_SEQ_ENABLE
	#undef SHTPS_LOG_DEBUG_ENABLE
	#undef SHTPS_LOG_EVENT_ENABLE
	#undef SHTPS_MODULE_PARAM_ENABLE
	#undef SHTPS_DEBUG_VARIABLE_DEFINES
	#undef SHTPS_CREATE_KOBJ_ENABLE
#endif

#define	SHTPS_LOG_ERROR_ENABLE

#ifdef SHTPS_LOG_EVENT_ENABLE
	#define SHTPS_LOG_OUTPUT_SWITCH_ENABLE
#endif /* #if defined( SHTPS_LOG_EVENT_ENABLE ) */

#if defined(SHTPS_PERFORMANCE_CHECK_ENABLE)
	#define SHTPS_PERFORMANCE_CHECK_PIN_ENABLE
	//#define SHTPS_PERFORMANCE_TIME_LOG_ENABLE
#endif /* SHTPS_PERFORMANCE_CHECK_ENABLE */

/* ===================================================================================
 * [ Diag ]
 */
#ifdef	SHTPS_FACTORY_MODE_ENABLE
	#undef	SHTPS_BOOT_FWUPDATE_ENABLE
	#undef	SHTPS_BOOT_FWUPDATE_FORCE_UPDATE
	#define	SHTPS_FMODE_GESTURE_ENABLE
	#define SHTPS_TPIN_CHECK_ENABLE
#else
	#define	SHTPS_BOOT_FWUPDATE_ENABLE
	#undef	SHTPS_BOOT_FWUPDATE_FORCE_UPDATE
	#undef	SHTPS_FMODE_GESTURE_ENABLE
	#undef	SHTPS_TPIN_CHECK_ENABLE
#endif

// #define SHTPS_CHECK_CRC_ERROR_ENABLE
#define	SHTPS_SMEM_BASELINE_ENABLE

#define SHTPS_DIAGPOLL_TIME							100


/* ===================================================================================
 * [ Firmware update ]
 */
#define SHTPS_MULTI_FW_ENABLE
#define SHTPS_CHECK_HWID_ENABLE
#define SHTPS_BOOT_FWUPDATE_ONLY_ON_HANDSET
#define SHTPS_SPI_FWBLOCKWRITE_ENABLE
#define	SHTPS_FWUPDATE_BUILTIN_ENABLE

#if defined(SHTPS_MULTI_FW_ENABLE)
	#define SHTPS_CHECK_HWID_ENABLE
#endif /* SHTPS_MULTI_FW_ENABLE */

#if defined(SHTPS_CHECK_HWID_ENABLE)
	#define SHTPS_GET_HW_VERSION_RET_ES_0		0
	#define SHTPS_GET_HW_VERSION_RET_ES_1		1
	#define SHTPS_GET_HW_VERSION_RET_PP_1		2
	#define SHTPS_GET_HW_VERSION_RET_PP_2		3
	#define SHTPS_GET_HW_VERSION_RET_UNKNOWN	0xFF
#endif /* SHTPS_CHECK_HWID_ENABLE */

#if defined(SHTPS_MULTI_FW_ENABLE)
	#include "tm2949-001/shtps_fw_tm2949-001.h"
	#include "tm2949-001/shtps_fw_tm2949-001_es0.h"
	#include "tm2949-001/shtps_fw_tm2949-001_es1.h"

	typedef struct {
		unsigned char		hwrev;
		const unsigned char	*data;
		unsigned short		size;
		unsigned short		ver;
		char				*name;
	} shtps_multi_fw_info_t;
	
	static const shtps_multi_fw_info_t SHTPS_MULTI_FW_INFO_TBL[] = {
		{ SHTPS_GET_HW_VERSION_RET_ES_0,	tps_fw_data_es0,	SHTPS_FWSIZE_NEWER_ES0,	SHTPS_FWVER_NEWER_ES0,	"ES0" },
		{ SHTPS_GET_HW_VERSION_RET_ES_1,	tps_fw_data_es1,	SHTPS_FWSIZE_NEWER_ES1,	SHTPS_FWVER_NEWER_ES1,	"ES1" },
		{ SHTPS_GET_HW_VERSION_RET_PP_1,	tps_fw_data,		SHTPS_FWSIZE_NEWER,		SHTPS_FWVER_NEWER,		"NORMAL" },
		{ SHTPS_GET_HW_VERSION_RET_PP_2,	tps_fw_data,		SHTPS_FWSIZE_NEWER,		SHTPS_FWVER_NEWER,		"NORMAL" },
		//
		{ SHTPS_GET_HW_VERSION_RET_UNKNOWN,	tps_fw_data,		SHTPS_FWSIZE_NEWER,		SHTPS_FWVER_NEWER,		"NORMAL" },
	};
	static const int SHTPS_MULTI_FW_INFO_SIZE = sizeof(SHTPS_MULTI_FW_INFO_TBL) / sizeof(shtps_multi_fw_info_t);
#else
	#include "tm2949-001/shtps_fw_tm2949-001.h"
#endif /* SHTPS_MULTI_FW_ENABLE */


/* ===================================================================================
 * [ Model specifications ]
 */
#define CONFIG_SHTPS_SY3000_PANEL_SIZE_X		720
#define CONFIG_SHTPS_SY3000_PANEL_SIZE_Y		1280
#define CONFIG_SHTPS_SY3000_LCD_SIZE_X			CONFIG_SHTPS_SY3000_PANEL_SIZE_X
#define CONFIG_SHTPS_SY3000_LCD_SIZE_Y			CONFIG_SHTPS_SY3000_PANEL_SIZE_Y
#define CONFIG_SHTPS_SY3000_FACETOUCH_DETECT
#define CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT
#define CONFIG_SHTPS_SY3000_POSITION_OFFSET
#define CONFIG_SHTPS_SY3000_ALWAYS_ACTIVEMODE
//#define CONFIG_SHTPS_SY3000_FLIP_CHANGE_HANDLE

#define SHTPS_IRQ_LEVEL_ENABLE
#define SHTPS_SYSTEM_BOOT_MODE_CHECK_ENABLE
#define SHTPS_SYSTEM_HOT_STANDBY_ENABLE
#define	SHTPS_IRQ_LOADER_CHECK_INT_STATUS_ENABLE

//#define SHTPS_PHYSICAL_KEY_ENABLE
//#define SHTPS_HOVER_DETECT_ENABLE
//#define SHTPS_PEN_DETECT_ENABLE
#define SHTPS_LPWG_MODE_ENABLE

#if defined( SHTPS_LPWG_MODE_ENABLE )
	#define SHTPS_HOST_LPWG_MODE_ENABLE
#endif /* SHTPS_LPWG_MODE_ENABLE */

#if defined( CONFIG_SHTPS_SY3000_ALWAYS_ACTIVEMODE )
//	#define SHTPS_LOW_POWER_MODE_ENABLE
#endif /* #if defined( CONFIG_SHTPS_SY3000_ALWAYS_ACTIVEMODE ) */

#define SHTPS_QOS_LATENCY_DEF_VALUE	 			34

#define SHTPS_CPU_IDLE_SLEEP_CONTROL_ENABLE
#define SHTPS_CPU_SLEEP_CONTROL_FOR_FWUPDATE_ENABLE

#define SHTPS_TMDATA_NOTCHANGE_TXRX

#define SHTPS_LGM_SPLIT_TOUCH_COMBINING_ENABLE

#if defined( CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT )
	#define SHTPS_FACETOUCH_OFF_DETECT_DOZE_ENABLE
#endif /* CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT */

/* ===================================================================================
 * [ Firmware control ]
 */
#define SHTPS_FWDATA_BLOCK_SIZE_MAX					0xFFFF
#define SHTPS_BOOTLOADER_ACK_TMO					3000
#define SHTPS_FWTESTMODE_ACK_TMO					3000
#define SHTPS_BASELINE_OFFSET_UPDATE_POLL_COUNT		30
#define SHTPS_BASELINE_OFFSET_UPDATE_POLL_INTERVAL	10
#define SHTPS_BASELINE_OFFSET_CAL_POLL_COUNT		30
#define SHTPS_BASELINE_OFFSET_CAL_POLL_INTERVAL		10
#define SHTPS_PDT_PAGE_SIZE_MAX						3
#define SHTPS_PDT_READ_RETRY_COUNT					5
#define SHTPS_PDT_READ_RETRY_INTERVAL				200
#define SHTPS_FLASH_ERASE_WAIT_MS					2000

#define SHTPS_POS_SCALE_X(ts)	(((CONFIG_SHTPS_SY3000_PANEL_SIZE_X) * 10000) / ts->map.fn11.ctrl.maxXPosition)
#define SHTPS_POS_SCALE_Y(ts)	(((CONFIG_SHTPS_SY3000_PANEL_SIZE_Y) * 10000) / ts->map.fn11.ctrl.maxYPosition)


/* ===================================================================================
 * [ Hardware specifications ]
 */
#define SHTPS_GPIO_TPIN_NO					96
#define SHTPS_SY3X00_GPIO_RST				29
#define SHTPS_SY3X00_GPIO_IRQ				77
#define SHTPS_SY3X00_SPI_CLOCK				1100000

#define SHTPS_SPI_BLOCKACCESS_ENABLE

#define	SHTPS_SPI_FAST_CLOCK_ENABLE
#define	SHTPS_SPI_FAST_FW_TRANSFER_ENABLE

#ifdef	SHTPS_SPI_FAST_CLOCK_ENABLE
	#define TPS_SPI_R_CLOCK			3200000
	#define TPS_SPI_W_CLOCK			3200000
	#define TPS_SPI_R_BYTE_DELAY	20
	#define TPS_SPI_W_BYTE_DELAY	5
	#define TPS_SPI_R_TANS_WAIT		5
	#define TPS_SPI_W_TANS_WAIT		5
#else
	#define TPS_SPI_R_CLOCK			1100000
	#define TPS_SPI_W_CLOCK			600000
	#define TPS_SPI_R_BYTE_DELAY	20
	#define TPS_SPI_W_BYTE_DELAY	0
	#define TPS_SPI_R_TANS_WAIT		40
	#define TPS_SPI_W_TANS_WAIT		65
#endif

#ifdef	SHTPS_SPI_BLOCKACCESS_ENABLE
	#define SHTPS_SY3X00_FINGER_SPIREAD_CNT		2
#else
	#define SHTPS_SY3X00_FINGER_SPIREAD_CNT		0
#endif

#define	SHTPS_SY3X00_SPIBLOCK_BUFSIZE			(SHTPS_TM_TXNUM_MAX * 2)
#define SHTPS_SY3X00_SPIBLOCKWRITE_BUFSIZE		0x10

#define SHTPS_SPI_RETRY_COUNT					5
#define SHTPS_SPI_RETRY_WAIT					5

#define SHTPS_STARTUP_MIN_TIME					300
#define SHTPS_POWERON_WAIT_MS					400
#define SHTPS_POWEROFF_WAIT_MS					10
#define SHTPS_HWRESET_TIME_US					1
#define SHTPS_HWRESET_AFTER_TIME_MS				1
#define SHTPS_HWRESET_WAIT_MS					290
#define SHTPS_SWRESET_WAIT_MS					300
#define SHTPS_RESET_BOOTLOADER_WAIT_MS			400
#define SHTPS_SLEEP_OUT_WAIT_US					67500


/* ===================================================================================
 * [ Performance ]
 */
#ifdef CONFIG_SHSYS_CUST_PERFLOCK
	#define SHTPS_CPU_CLOCK_CONTROL_ENABLE
#endif /* CONFIG_SHSYS_CUST_PERFLOCK */


/* ===================================================================================
 * [ Standard ]
 */
#define	SHTPS_ASYNC_OPEN_ENABLE				// delete
//#define SHTPS_VKEY_INVALID_AREA_ENABLE	// delete
//#define SHTPS_BTLOADER_VER_ENABLE			// delete
//#define SHTPS_SPICLOCK_CONTROL_ENABLE		// delete
#define SHTPS_SY_REGMAP_BASE3				// delete
#define SHTPS_IRQ_LINKED_WITH_IRQWAKE_ENABLE
#define SHTPS_PDT_READ_RETRY_ENABLE
#define SHTPS_FAILSAFE_ENABLE				// delete
#define SHTPS_INPUT_POWER_MODE_CHANGE_ENABLE
#define SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE
#define SHTPS_TOUCHCANCEL_BEFORE_FORCE_TOUCHUP_ENABLE
#define SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE


/* ===================================================================================
 * [ Host functions ]
 */
#define SHTPS_DRAG_STEP_ENABLE
#define SHTPS_CHARGER_ARMOR_ENABLE
#define SHTPS_CLING_REJECTION_ENABLE
//#define SHTPS_EDGE_POS_ADJUST_ENABLE
//#define SHTPS_MULTI_HOVER_SELECT_ENABLE
// #define SHTPS_SPI_AVOID_BLOCKREAD_FAIL		

#define SHTPS_FINGER_ABSORPTION_PROVISION_ENABLE
//#define SHTPS_PROXIMITY_SUPPORT_ENABLE
//#define SHTPS_ACTIVE_SLEEP_WAIT_ALWAYS_ENABLE
#define SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE
//#define SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_ENABLE
//#define SHTPS_FINGER_WIDTH_MODERATION_ENABLE
#define SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE
#define SHTPS_GRIP_FAIL_TOUCH_REJECTION_ENABLE
//#define SHTPS_DIAGONAL_GHOST_CHECK_ENABLE	
#define SHTPS_DRAG_SMOOTH_ENABLE
#define SHTPS_SHIFT_EDGE_INWARD_ENABLE
#define SHTPS_WAKEUP_CALIB_ENABLE
#define SHTPS_PINCH_FAIL_RESPONSE_REJECTION_ENABLE
#define SHTPS_PINCHOUT_OUTSET_DISTORT_REJECTION_ENABLE
#define SHTPS_Z_ZERO_TOUCH_EVENT_REJECTION_ENABLE
#define SHTPS_SET_MINIMUM_DRUMMING_SEPARATION_ENABLE
#define SHTPS_LGM_FAIL_TOUCH_UP_REJECTION_ENABLE
#define SHTPS_HOVER_REJECTION_ENABLE
#define SHTPS_EDGE_TOUCH_SHAKE_REJECTION_ENABLE
#define SHTPS_DEF_QUICK_FLICK_FAIL_RESOLV_ENABLE


#if defined(SHTPS_HOVER_DETECT_ENABLE)
	#define SHTPS_HOVER_DETECT_FAIL_RESOLV_ENABLE
	#define SHTPS_FORCECAL_AFTER_HOVERSETTING_ENABLE
	#define SHTPS_HOVER_HOST_JITTER_FILTER_ENABLE
	#define SHTPS_HOVER_EDGE_LOST_RESOLV_ENABLE
#endif /* SHTPS_HOVER_DETECT_ENABLE */

#if defined(SHTPS_PHYSICAL_KEY_ENABLE)
//	#define SHTPS_FINGER_KEY_EXCLUDE_ENABLE
	
	#if defined(SHTPS_PROXIMITY_SUPPORT_ENABLE)
		#define SHTPS_KEY_PROXIMITY_ASYNC_CHECK_ENABLE
	#endif /* SHTPS_PROXIMITY_SUPPORT_ENABLE */
#endif /* SHTPS_PHYSICAL_KEY_ENABLE */

#if defined(SHTPS_BOOT_FWUPDATE_FORCE_UPDATE)
	#undef SHTPS_BOOT_FWUPDATE_ONLY_ON_HANDSET
#endif /* SHTPS_BOOT_FWUPDATE_FORCE_UPDATE */

// #if defined(SHTPS_LPWG_MODE_ENABLE)
// 	#define SHTPS_LPWG_GRIP_SUPPORT_ENABLE
// #endif /* SHTPS_LPWG_MODE_ENABLE */

#if defined(SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE) && defined(SHTPS_PHYSICAL_KEY_ENABLE)
	#define SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_ENABLE
#endif /* SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE && SHTPS_PHYSICAL_KEY_ENABLE */

#if defined( SHTPS_CHARGER_ARMOR_ENABLE )
	#define SHTPS_JITTER_FILTER_ENABLE
	//#define SHTPS_SATURATION_CAPACITANCE_ENABLE
	//#define SHTPS_PIXEL_TOUCH_THRESHOLD_ENABLE
#endif /* #if defined( SHTPS_CHARGER_ARMOR_ENABLE ) */

#if defined ( CONFIG_SHTPS_SY3000_AUTOREZERO_CONTROL )
	#define SHTPS_AUTOREZERO_SINGLE_FINGER_ENABLE
	#define SHTPS_AUTOREZERO_CONTROL_ENABLE
#else
	#undef	SHTPS_AUTOREZERO_SINGLE_FINGER_ENABLE
	#undef	SHTPS_AUTOREZERO_CONTROL_ENABLE
#endif /* #if defined ( CONFIG_SHTPS_SY3000_AUTOREZERO_CONTROL ) */

//#define SHTPS_MAGNIFICATION_CORRECTION_SIZE_W_ENABLE

/* ===================================================================================
 * [ Local MACRO ]
 */
#if defined( SHTPS_DEVELOP_MODE_ENABLE )
	#define SHTPS_PARAM_DEF(name,val) \
		static int name = val; \
		module_param(name,int,S_IRUGO | S_IWUSR);
#else
	#define SHTPS_PARAM_DEF(name,val) \
		const static int name = val;
#endif /* SHTPS_DEVELOP_MODE_ENABLE */

/* ===================================================================================
 * [ Parameters ]
 */
/* -----------------------------------------------------------------------------------
 */
SHTPS_PARAM_DEF( SHTPS_SLEEP_IN_WAIT_MS,	30  );
SHTPS_PARAM_DEF( SHTPS_SLEEP_OUT_WAIT_MS,	80  );
SHTPS_PARAM_DEF( SHTPS_VEILVIEW_PATTERN,	SHTPS_VEILVIEW_PATTERN_MONOCHROME_1H);

//SHTPS_PARAM_DEF( SHTPS_BASELINE_OFFSET_DISABLE_WAIT_MS,		300);
//SHTPS_PARAM_DEF( SHTPS_FWTESTMODE_FORCECAL_WAIT,			100);
SHTPS_PARAM_DEF( SHTPS_F54_COMMAND_WAIT_POLL_COUNT,		30);
SHTPS_PARAM_DEF( SHTPS_F54_COMMAND_WAIT_POLL_INTERVAL,	10);

/* -----------------------------------------------------------------------------------
 */
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_READ_SPEED,		TPS_SPI_R_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_WRITE_SPEED,		TPS_SPI_W_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_READ_WAIT,		TPS_SPI_R_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_WRITE_WAIT,		TPS_SPI_W_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_READ_WAIT,	TPS_SPI_R_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_WRITE_WAIT,	TPS_SPI_W_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_TOUCH_PERFORMANCE_UP_MODE,		1);

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DRAG_STEP_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_DRAG_DIR_FIX_CNT,				3  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_ZERO,			4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_1ST,			4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_2ND,			1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_1ST_MULTI,		4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_2ND_MULTI,		1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_ZERO,			4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_1ST,			4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_2ND,			1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_1ST_MULTI,		4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_2ND_MULTI,		1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_RETURN_TIME_ZERO,	250);
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_RETURN_TIME,			250);
#endif /* SHTPS_DRAG_STEP_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( CONFIG_SHTPS_SY3000_FACETOUCH_DETECT ) || defined( CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT )
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_PALMDET,			15  );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_FUZZ,				0   );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MIN,				1   );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MAX,				8   );
	SHTPS_PARAM_DEF( SHTPS_LOS_SINGLE,						0x40);
	SHTPS_PARAM_DEF( SHTPS_LOS_MULTI,						0x40);
#else
	#define SHTPS_FINGER_WIDTH_PALMDET (15)
	#define SHTPS_FINGER_WIDTH_MIN	 (1)
#endif /* CONFIG_SHTPS_SY3000_FACETOUCH_DETECT || CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_JITTER_FILTER_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_STRENGTH_DEFAULT,	0x40);
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_STRENGTH,			0x40);
#endif /* SHTPS_JITTER_FILTER_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_CPU_CLOCK_CONTROL_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_TIME_MS,	100);
#endif /* SHTPS_CPU_CLOCK_CONTROL_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_SATURATION_CAPACITANCE_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_SATURATION_DEFAULT_LSB,	0x6C);
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_SATURATION_DEFAULT_MSB,	0x07);
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_SATURATION_LSB,			0x20);
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_SATURATION_MSB,			0x08);
#endif /* #if defined( SHTPS_SATURATION_CAPACITANCE_ENABLE ) */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_PIXEL_TOUCH_THRESHOLD_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_PIXEL_TOUCH_THRESHOLD,		0x59);
#endif /* #if defined( SHTPS_PIXEL_TOUCH_THRESHOLD_ENABLE ) */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_DETECT_ENABLE)
	#define SHTPS_HOVER_CTRL_BASE_ADR					0x00
	#define SHTPS_HOVER_CTRL_BASE_ADR_A1				0x09
	SHTPS_PARAM_DEF( SHTPS_HOVER_THRESH_FOR_ADC_OLD,	0x2e);
	SHTPS_PARAM_DEF( SHTPS_HOVER_THRESH_FOR_ADC,		0x40);
#endif /* SHTPS_HOVER_DETECT_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_DETECT_FAIL_RESOLV_ENABLE)
	#define SHTPS_HOVER_HIST_MAX								10
	#define SHTPS_HOVER_CENTER_HIST_MAX							200

	SHTPS_PARAM_DEF( SHTPS_HOVER_TU_DELAY_TIME_MS,				0  );
	SHTPS_PARAM_DEF( SHTPS_HOVER_INFO_EFFECT_TIME_MS,			200);
	SHTPS_PARAM_DEF( SHTPS_HOVER_CENTER_INFO_EFFECT_TIME_MS,	200);
	SHTPS_PARAM_DEF( SHTPS_EDGE_HOVER_FAIL_RANGE_X,				50 );
	SHTPS_PARAM_DEF( SHTPS_EDGE_HOVER_FAIL_RANGE_Y,				35 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_HIST_COUNT_MAX,				5  );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WX_MIN,					-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WX_MAX,					-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WY_MIN,					-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WY_MAX,					-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_EDGE_LOST_RESOLV_DISABLE,		0  );
	SHTPS_PARAM_DEF( hover_debug_log_enable,					0  );
	SHTPS_PARAM_DEF( stylus_detect_is_hover_event_enable,		1  );
	SHTPS_PARAM_DEF( hover_report_info_calc_type,				0  );
#endif /* SHTPS_HOVER_DETECT_FAIL_RESOLV_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_EDGE_POS_ADJUST_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_EDGE_DISABLE_AREA_OFFSET_X,	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_ADJUST_AREA_OFFSET_X,	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_DISABLE_AREA_OFFSET_Y,	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_ADJUST_AREA_OFFSET_Y,	0);
#endif /* SHTPS_EDGE_POS_ADJUST_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_MULTI_HOVER_SELECT_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_MULTI_HOVER_EDGE_FAIL_RANGE_X,	100);
	SHTPS_PARAM_DEF( SHTPS_MULTI_HOVER_DIFF_THRESH_X,		150);
#endif /* SHTPS_MULTI_HOVER_SELECT_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_LPWG_MODE_ENABLE)
	#define SHTPS_LPWG_REPORT_WG_ONLY						0x02

	#if defined( SHTPS_HOST_LPWG_MODE_ENABLE )
		#define SHTPS_ES0_HOST_LPWG_ENABLE
		
		SHTPS_PARAM_DEF( SHTPS_HOST_LPWG_ENABLE,				0);
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_DIST_THRESHOLD,		260);
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_CHECK_TIME_MS,		500);
	#endif /* SHTPS_HOST_LPWG_MODE_ENABLE */

	#if defined(SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_MINIMUM_DISTANCE,		0x19);
	#endif /* SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE */

	SHTPS_PARAM_DEF( SHTPS_LPWG_ENABLE_GESTURE,					0x02);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_INTERVAL_DEF,				0x01);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_INTERVAL,					0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_WAKEUP_THRESHOLD_DEF,		0x28);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_WAKEUP_THRESHOLD,			0x28);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_DEF,				0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF,					0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_CTL,						0x02);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MAX_ACTIVE_DURATION,			0x01);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MAX_ACTIVE_DURATION_TIME,		0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_RX_CLIP_LO,						0x60);
	SHTPS_PARAM_DEF( SHTPS_LPWG_RX_CLIP_HI,						0x60);
	SHTPS_PARAM_DEF( SHTPS_LPWG_TX_CLIP_LO,						0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_TX_CLIP_HI,						0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_QOS_LATENCY_DEF_VALUE,			SHTPS_QOS_LATENCY_DEF_VALUE);
	SHTPS_PARAM_DEF( SHTPS_LPWG_BLOCK_TIME_MAX_MS,				2000);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MIN_NOTIFY_INTERVAL,			1000);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MODE_ON_AFTER_SLEEP_ENABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MODE_ON_AFTER_REZERO_ENABLE,	0);

	#if defined(SHTPS_PROXIMITY_SUPPORT_ENABLE)
		#include <sharp/proximity.h>
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_SUPPORT_ENABLE,	0);
		SHTPS_PARAM_DEF( SHTPS_LPWG_MIN_NOTIFY_CANCEL_INTERVAL,	800);
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_CHECK_PREWAIT,	100);
	#endif /* SHTPS_PROXIMITY_SUPPORT_ENABLE */
#endif /* SHTPS_LPWG_MODE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PHYSICAL_KEY_ENABLE)
	#if defined(SHTPS_PROXIMITY_SUPPORT_ENABLE)
		#include <sharp/proximity.h>
		SHTPS_PARAM_DEF( SHTPS_KEY_PROXIMITY_SUPPORT_ENABLE,	1);
	#endif /* SHTPS_PROXIMITY_SUPPORT_ENABLE */
#endif /* SHTPS_PHYSICAL_KEY_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_FINGER_KEY_EXCLUDE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_KEY_DISABLE_EFFECT_AREA,		100);
	SHTPS_PARAM_DEF( SHTPS_KEY_DISABLE_TIME_MS,			200);
	SHTPS_PARAM_DEF( SHTPS_TOUCH_DISABLE_TIME_MS,		200);
#endif /* SHTPS_FINGER_KEY_EXCLUDE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_FORCECAL_AFTER_HOVERSETTING_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_FORCECAL_AFTER_HOVERSETTING_WAIT,20);
#endif /* SHTPS_FORCECAL_AFTER_HOVERSETTING_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_FINGER_ABSORPTION_PROVISION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_FINGER_ABSORPTION_DIST_THRESHOLD,	400);
	SHTPS_PARAM_DEF( SHTPS_FINGER_ABSORPTION_HOLD_TIME_MS,		200);

	#if defined(SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_DISABLE,	0);
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_DIST_THRESHOLD,				50);
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_HOLD_TIME_MS,				100);
	#endif /* SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_ENABLE */
#endif /* SHTPS_FINGER_ABSORPTION_PROVISION_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_CLING_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE0_ENABLE,					0);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE1_ENABLE,					0);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE2_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE3_ENABLE,					1);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_REZERO_TYPE,					1);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE0_Z_THRESH,					54);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE0_OFFSET_Z,					255);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE0_CNT,						254);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE0_CNT_CHANGE_TIME,			5000);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE0_MOVE_THRESH,				400);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE1_WX_THRESH,				15);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE1_WY_THRESH,				10);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE1_CNT,						2);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE3_Z_THRESH,					100);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_MODE3_WX_THRESH,				60);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_LOG_ENABLE,0);
		#define	SHTPS_LOG_CLING_REJECT(...)									\
			if(SHTPS_CLING_REJECT_LOG_ENABLE != 0){							\
				printk(KERN_DEBUG "[shtps] [cling_reject]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_CLING_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_CLING_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_HOST_JITTER_FILTER_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_DISABLE,			0);
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_THRESHOLD,		15);
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_JUMP_THRESHOLD,	30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_JUMP_COUNT,		5);
#endif /* SHTPS_HOVER_HOST_JITTER_FILTER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_FINGER_WIDTH_MODERATION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MODERATION_DISABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_GAIN_THRESHOLD,			10);
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MODERATION_RATIO,		5);
#endif	/* SHTPS_FINGER_WIDTH_MODERATION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_ENABLE,				1);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_AREA_THRESH_X,		80);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_AREA_THRESH_Y,		434);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_DISTANCE,				256);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_Z_RATIO,				81);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_Z_RATIO_2,			88);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_EFFECT_TIME,			1463);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_X,	150);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_Y,	100);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_Z,	70);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_X,			30);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_ZW_RATIO,	275);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_Z,			27);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_LOG_ENABLE,0);
		#define	SHTPS_LOG_DBG_EDGE_FAIL_TOUCH_PRINT(...)						\
			if(SHTPS_EDGE_FAIL_TOUCH_REJECT_LOG_ENABLE != 0){					\
				printk(KERN_DEBUG "[shtps] [edge_fail_reject]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DBG_EDGE_FAIL_TOUCH_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_DISABLE,0);
#endif /* SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_SUSPEND_SPI_RESUME_FUNC_DELAY,	0);
#endif /* SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_REZERO_ENABLE,1);
	
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_LOG_ENABLE,	0);
		#define	SHTPS_LOG_WAKEUP_FAIL_TOUCH_EVENT_REJECT(...)					\
			if(SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_LOG_ENABLE != 0){			\
				printk(KERN_DEBUG "[shtps] [wakeup_fail_event]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_WAKEUP_FAIL_TOUCH_EVENT_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_KEY_PROXIMITY_ASYNC_CHECK_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_KEY_PROXIMITY_DOWN_HOLD_TIME_MS,		500);
#endif /* SHTPS_KEY_PROXIMITY_ASYNC_CHECK_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_GRIP_FAIL_TOUCH_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_ENABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_AREA,			10);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_Z_THRESH,		36);

	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_ENABLE,		1);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_AREA,			20);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_W_THRESH,		0);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_DIST, 		300);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_LOG_ENABLE,0);
		#define	SHTPS_LOG_DBG_GRIP_FAIL_TOUCH_PRINT(...)						\
			if(SHTPS_GRIP_FAIL_TOUCH_REJECT_LOG_ENABLE != 0){					\
				printk(KERN_DEBUG "[shtps] [grip_fail_reject]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DBG_GRIP_FAIL_TOUCH_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_GRIP_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PINCH_FAIL_RESPONSE_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_REG_OFFSET_SEGMENTATION_AGGRESSIVENESS,		0x1F);

	SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_RESPONSE_REJECT_ENABLE,			1);
	SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_FINGER_1ST_DISTANCE_THRESH,		500);
	SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_FINGER_2ND_DISTANCE_THRESH,		430);
	SHTPS_PARAM_DEF( SHTPS_SEGMENTATION_AGGRESSIVENESS_SET_VAL,			0xFF);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_RESPONSE_REJECT_LOG_ENABLE,0);
		#define	SHTPS_LOG_DBG_SHTPS_PINCH_FAIL_RESPONSE_PRINT(...)				\
			if(SHTPS_PINCH_FAIL_RESPONSE_REJECT_LOG_ENABLE != 0){				\
				printk(KERN_DEBUG "[shtps] [pinch_fail_reject]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DBG_SHTPS_PINCH_FAIL_RESPONSE_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PINCH_FAIL_RESPONSE_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PINCHOUT_OUTSET_DISTORT_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_Z_REDUCE_THRESH, 	10);
	SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_DISTANCE_THRESH, 	340);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_LOG_DBG_PINCHOUT_DISTORT_PRINT(...)				\
	        if(SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [pinch_out]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_PINCHOUT_DISTORT_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PINCHOUT_OUTSET_DISTORT_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT )
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_CHECK_MULTITOUCH,		1);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_CHECK_PALMFLAG,			1);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_CHECK_FINGERWIDTH,		1);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_OFF_NOTIFY_BY_ALLTU,		1);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_CHANGE_LOS,				0);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_PALMDET_W,				32);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_PALMDET_W_THRESHOLD,		15);
	SHTPS_PARAM_DEF(SHTPS_FACETOUCH_DETECT_PALMDET_W_8BIT_THRESHOLD,40);
//	SHTPS_PARAM_DEF(SHTPS_LOS_SINGLE,								0x40);
//	SHTPS_PARAM_DEF(SHTPS_LOS_MULTI,								0x40);
#endif /* CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT */


/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DIAGONAL_GHOST_CHECK_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_CHECK_AREA,				50);
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_Z_THRESHOLD,				255);
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_TIMEOUT,					500);
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_CHECK_AFTER_TU_ENABLE,	0);
#endif	/* SHTPS_DIAGONAL_GHOST_CHECK_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DRAG_SMOOTH_ENABLE )
	#define SHTPS_DRAG_HISTORY_SIZE_MAX 30
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_DISABLE, 					0);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_LEAVE_MAX_DOT, 				10);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_COUNT_MIN,		 			5);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_COUNT_MAX,					20);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_COUNT_UP_STEP,				5);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FIXED_SHIFT, 				8);
	#define SHTPS_DRAG_SMOOTH_INT_TO_FIXED(val)			((val) << SHTPS_DRAG_SMOOTH_FIXED_SHIFT)
	#define SHTPS_DRAG_SMOOTH_FIXED_TO_INT(val)			((val) >> SHTPS_DRAG_SMOOTH_FIXED_SHIFT)

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_LOG_ENABLE,				0);
		#define	SHTPS_LOG_DRAG_SMOOTH(...)									\
			if(SHTPS_DRAG_SMOOTH_LOG_ENABLE != 0){							\
				printk(KERN_DEBUG "[shtps] [drag_smooth]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DRAG_SMOOTH(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DRAG_SMOOTH_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_SHIFT_EDGE_INWARD_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_SHIFT_EDGE_INWARD_DISABLE, 				0);
	SHTPS_PARAM_DEF( SHTPS_SHIFT_EDGE_INWARD_OFFSET, 				10);
#endif /* SHTPS_SHIFT_EDGE_INWARD_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_LGM_SPLIT_TOUCH_COMBINING_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_DIST_THRESH,				350);
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_LOG_ENABLE,0);
		#define	SHTPS_LOG_LGM_SPLIT_TOUCH_COMBINE(...)						\
			if(SHTPS_LGM_SPLIT_TOUCH_COMBINE_LOG_ENABLE != 0){				\
				printk(KERN_DEBUG "[shtps] [lgm split]" __VA_ARGS__);		\
			}
	#else
		#define	SHTPS_LOG_LGM_SPLIT_TOUCH_COMBINE(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_LGM_SPLIT_TOUCH_COMBINING_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_WAKEUP_CALIB_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_ENABLE_SWITCH,			0);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_LAST_ONE_ENABLE,		1);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_INTERVAL_MS,			1500);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_DELAY_MS,				2000);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_STOP_COND_EVENT_NUM,	50);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_STOP_COND_MOVE_DIST,	250);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_ONLY_LO_DETECTED,		0);
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_CALIB_GUARD_LO_DETECTED,		1);
#endif /* SHTPS_WAKEUP_CALIB_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_MAGNIFICATION_CORRECTION_SIZE_W_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_MAGNIFICATION_CORRECT_SIZE_W_ENABLE,	1);
	SHTPS_PARAM_DEF( SHTPS_MAGNIFICATION_CORRECT_SIZE_SCALE,	10);
#endif /* SHTPS_MAGNIFICATION_CORRECTION_SIZE_W_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_Z_ZERO_TOUCH_EVENT_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_Z_ZERO_TOUCH_EVENT_REJECT_ENABLE,	1);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_Z_ZERO_TOUCH_EVENT_REJECT_LOG_ENABLE,	0);
		#define	SHTPS_LOG_Z_ZERO_TOUCH_EVENT_REJECT(...)						\
			if(SHTPS_Z_ZERO_TOUCH_EVENT_REJECT_LOG_ENABLE != 0){				\
				printk(KERN_DEBUG "[shtps] [z_zero_reject]" __VA_ARGS__);		\
			}
	#else
		#define	SHTPS_LOG_Z_ZERO_TOUCH_EVENT_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_Z_ZERO_TOUCH_EVENT_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_SET_MINIMUM_DRUMMING_SEPARATION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_MINIMUM_DRUMMING_SEPARATION_ENABLE,	1);
	SHTPS_PARAM_DEF( SHTPS_MINIMUM_DRUMMING_SEPARATION_VALUE,	0x28);
#endif /* SHTPS_SET_MINIMUM_DRUMMING_SEPARATION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_LGM_FAIL_TOUCH_UP_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_ENABLE,								1);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_Z_THRESH_1,							30);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_Z_THRESH_2,							36);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_CHATT_TIME_1,						69);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_CHATT_TIME_2,						53);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_SET_Z_TOUCH_THRESHOLD,				0x0A);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_SET_SEGMENTATION_AGGRESSIVENESS,	0x01);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_CHATT_ROOP_TIME,					14);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_DISABLE_MOVE_THRESH,				80);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_ENABLE_MOVE_THRESH,					10);
	SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_DISABLE_Z_THRESH,					40);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_LGM_FAIL_TOUCH_UP_REJECT_LOG_ENABLE,	0);
		#define	SHTPS_LOG_LGM_FAIL_TOUCH_UP_REJECT(...)						\
			if(SHTPS_LGM_FAIL_TOUCH_UP_REJECT_LOG_ENABLE != 0){				\
				printk(KERN_DEBUG "[shtps] [lgm_fail_tu]" __VA_ARGS__);		\
			}
	#else
		#define	SHTPS_LOG_LGM_FAIL_TOUCH_UP_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_LGM_FAIL_TOUCH_UP_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_ENABLE,							1);
	SHTPS_PARAM_DEF( SHTPS_REG_ADDR_OFFSET_HOVER_REJECTION_THRESHOLD,	0x2E);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_HOVER_REJECTION_THRESHOLD,			0x20);
#endif /* SHTPS_HOVER_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_EDGE_TOUCH_SHAKE_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_REJECT_ENABLE,			1);
	SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_ADJUST_POS,				14);
	SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_AREA_X,					39);
	SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_AREA_Y,					1030);
	SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_ADJUST_CANCEL_MOVE_X,	60);
	SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_ADJUST_CANCEL_MOVE_Y,	50);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_EDGE_TOUCH_SHAKE_REJECT_LOG_ENABLE,	0);
		#define	SHTPS_LOG_SHTPS_EDGE_TOUCH_SHAKE_REJECT(...)						\
			if(SHTPS_EDGE_TOUCH_SHAKE_REJECT_LOG_ENABLE != 0){				\
				printk(KERN_DEBUG "[shtps] [edge_shake]" __VA_ARGS__);		\
			}
	#else
		#define	SHTPS_LOG_SHTPS_EDGE_TOUCH_SHAKE_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_EDGE_TOUCH_SHAKE_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_DEF_QUICK_FLICK_FAIL_RESOLV_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_QUICK_FLICK_FAIL_RESOLV_ENABLE,			1);
	SHTPS_PARAM_DEF( SHTPS_QUICK_FLICK_FAIL_RESOLV_COUNT,			1);
	SHTPS_PARAM_DEF( SHTPS_QUICK_FLICK_FAIL_RESOLV_SPEED_THRESH,	2500);
	SHTPS_PARAM_DEF( SHTPS_QUICK_FLICK_FAIL_RESOLV_GAIN,			200);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_QUICK_FLICK_FAIL_RESOLV_LOG_ENABLE,	0);
		#define	SHTPS_LOG_QUICK_FLICK_FAIL_RESOLV(...)						\
			if(SHTPS_QUICK_FLICK_FAIL_RESOLV_LOG_ENABLE != 0){				\
				printk(KERN_DEBUG "[shtps] [quick flick fail resolv]" __VA_ARGS__);		\
			}
	#else
		#define	SHTPS_LOG_QUICK_FLICK_FAIL_RESOLV(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DEF_QUICK_FLICK_FAIL_RESOLV_ENABLE */

/* -----------------------------------------------------------------------------------
 */

#endif /* __SHTPS_CFG_TM2949_001_H__ */
